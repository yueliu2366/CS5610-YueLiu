<h3>Week05 Experiment </h3>
<div>
    <h5>Experiment1- SinglePage Demo</h5>
    <p>In this experiment, I build a prototype of single page website.</p>
    <p>Notice that<code>ngRoute</code> should be added to <code>angular.module()</code> The rest parts are trivial.</p>
</div>

<div>
    <h5>Experiment2- Page Controller</h5>
    <p>This experiment is based on the the experiment01. I add a controller in JS file to manipulate the front end UI</p>
    <p>
        The <code>$scope.addToFavorites</code> and <code>$scope.searchMovies </code> are the same as what I did in
        previous experiments.
    </p>
</div>

<div>
    <h5>Experiment3-Service</h5>
    <p>
        This experiment is based on the the experiment02. I build a service which exposes functions to be called by
        controllers. By using service, I am able to passing values between home page and profile page.
    </p>
    <p>Be sure to expose functions' name in <code>return{}</code>.so that they can be invoke by controllers.</p>

</div>

<div>
    <h5>Experiment4-Login Control</h5>
    <p>
        In this experiment, I build a login system prototype by using UserService. I also build a NavController which will
        invoke  <code>UserService.login() </code> when the login button is clicked. The most interesting part we should pay
        attention to is that adding <code>$routeParams</code> in <code>ProfileController</code> so that the username can be
        fetch by <code>$routeParams.username</code>.
    </p>
</div>

<div>
    <h5>Experimen5-Ng-show</h5>
    <p>
        In this experiment, I try out <code>ng-show</code> technique. It is a pretty important technique because I can use it to control
        whether or not elements are shown.
    </p>
</div>

